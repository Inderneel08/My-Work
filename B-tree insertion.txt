#include<bits/stdc++.h>
#include<cstdlib>
#include<fstream>
using namespace std;
class BtreeNode{
public:
    bool leaf;
    int*keys;
    BtreeNode**c;
    int t;
    int n;
    BtreeNode(int x,bool leaf_)
    {
        t=x;
        leaf=leaf_;
        keys=new int[2*t-1];
        c=new BtreeNode*[2*t];
        n=0;
    }
    void traverse(void)
    {
        int i=0;
        for(int i=0;i<n;i++){
            if(leaf==false){
                c[i]->traverse();
            }
            cout<<keys[i]<<" ";
        }
        if(leaf==false){
            c[i]->traverse();
        }
    }
    void splitchild(int i,BtreeNode*y)
    {
        BtreeNode*z=new BtreeNode(y->t,y->leaf);
        z->n=t-1;
        for(int j=0;j<t-1;j++){
            z->keys[j]=y->keys[j+t];
        }
        if(y->leaf==false){
            for(int j=0;j<t;j++){
                z->c[j]=y->c[j+t];
            }
        }
        y->n=t-1;
        for(int j=n;j>=i+1;j--){
            c[j+1]=c[j];
        }
        c[i+1]=z;
        for(int j=n-1;j>=i;j--){
            keys[j+1]=keys[j];
        }
        keys[i]=y->keys[t-1];
        n+=1;
    }
    int search_tree(int k)
    {
        int i=0;
        while(i<n&&keys[i]<k){
            i++;
        }
        if(keys[i]==k){
            return(1);
        }
        if(leaf==true){
            return(0);
        }
        if(leaf==false){
            return(c[i]->search_tree(k));
        }
    }
    void insert_non_full(int key)
    {
        int i=n-1;
        if(leaf==true){
            while(i>=0&&keys[i]>key){
                keys[i+1]=keys[i];
                i--;
            }
            keys[i+1]=key;
            n+=1;
        }
        else{
            while(i>=0&&keys[i]>key){
                i--;
            }
            if(c[i+1]->n==2*t-1){
                splitchild(i+1,c[i+1]);
                if(keys[i+1]<key){
                    i++;
                }
            }
            c[i+1]->insert_non_full(key);
        }
    }
    friend class Btree;
};
class Btree{
public:
    int t;
    BtreeNode*root;
    Btree(int x)
    {
        root=NULL;
        t=x;
    }
    void insert_in_tree(int key)
    {
        if(root==NULL){
            root=new BtreeNode(t,true);
            root->keys[0]=key;
            root->n=1;
        }
        else{
            if(root->n==2*t-1){
                BtreeNode*s=new BtreeNode(t,false);
                s->c[0]=root;
                s->splitchild(0,root);
            }
            else{
                root->insert_non_full(key);
            }
        }
    }
    void search_b_tree(int key)
    {
        if(root!=NULL){
            if(root->search_tree(key)==1){
                cout<<"Element found"<<endl;
            }
            else{
                cout<<"Element not present"<<endl;
            }
        }
    }
    void traverse(void)
    {
        if(root!=NULL){
            root->traverse();
        }
    }
};
int main()
{
    Btree x(3);
    x.insert_in_tree(10);
    x.insert_in_tree(20);
    x.insert_in_tree(30);
    x.insert_in_tree(40);
    x.insert_in_tree(50);
    x.traverse();
    cout<<endl;
    x.search_b_tree(20);
}
