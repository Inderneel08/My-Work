#include<iostream>
#include<cstdlib>
#include<fstream>
#include<queue>
using namespace std;
struct node{
    int data;
    struct node*left;
    struct node*right;
    node(int x)
    {
        data=x;
        left=NULL;
        right=NULL;
    }
};
void insert_element(struct node*root,int element)
{
    if(root==NULL){
        root=new node(element);
    }
    else{
        if(root->data>element){
            if(root->left!=NULL){
                insert_element(root->left,element);
            }
            else{
                root->left=new node(element);
            }
        }
        else{
            if(root->right!=NULL){
                insert_element(root->right,element);
            }
            else{
                root->right=new node(element);
            }
        }
    }
}
int search_tree_element(struct node*root,int element)
{
    if(root->data>element){
        if(root->left==NULL){
            return(0);
        }
        search_tree_element(root->left,element);
    }
    else if(root->data<element){
        if(root->right==NULL){
            return(0);
        }
        search_tree_element(root->right,element);
    }
    else if(root->data==element){
        return(1);
    }
}
struct node*min_find_value(struct node*root)
{
    node*temp=root;
    while(temp!=NULL&&temp->right!=NULL){
        temp=temp->right;
    }
    return(temp);
}
struct node*delete_element(struct node*root,int element)
{
    int x=search_tree_element(root,element);
    if(x==0){
        cout<<"Element does not exists:"<<endl;
    }
    else{
        if(root==NULL){
            return(root);
        }
        else if((root->data)>(element)){
            root->left=delete_element(root->left,element);
        }
        else if((root->data)<(element)){
            root->right=delete_element(root->right,element);
        }
        else{
            if(root->left==NULL){
                node*temp=root->right;
                delete(root);
                return(temp);
            }
            else if(root->right==NULL){
                node*temp=root->left;
                delete(root);
                return(temp);
            }
             node*temp=min_find_value(root->left);
             root->data=temp->data;
             root->left=delete_element(root->left,temp->data);
        }
    }
    return(root);
}
void level_order1(struct node*root)
{
    static queue<node*>x;
    if(root!=NULL){
        node*temp;
        cout<<root->data<<" ";
        if(root->left!=NULL){
            x.push(root->left);
        }
        if(root->right!=NULL){
            x.push(root->right);
        }
        temp=x.front();
        x.pop();
        level_order1(temp);
    }
}
int main()
{
    struct node*root=new node(43);
    root->left=new node(10);
    root->right=new node(79);
    root->left->left=new node(9);
    root->right->right=new node(90);
    root->right->left=new node(54);
    root->left->right=new node(12);
    root->left->right->left=new node(11);
    int x;
    cout<<"Insert an element:"<<endl;
    cin>>x;
    insert_element(root,x);
    cout<<"Enter the element to be deleted:"<<endl;
    cin>>x;
    root=delete_element(root,x);
    level_order1(root);
}
////

Code to create binary search tree by a given array.






#include<iostream>
#include<cstdlib>
#include<fstream>
#include<queue>
#include<stack>
using namespace std;
struct node{
    int data;
    struct node*left;
    struct node*right;
    node(int x)
    {
        data=x;
        left=NULL;
        right=NULL;
    }
}*rootx;
void insert_node(struct node*root,int element)
{
    if((root->data)<element){
        if(root->right!=NULL){
            insert_node(root->right,element);
        }
        else{
            root->right=new node(element);
        }
    }
    else{
        if(root->left!=NULL){
            insert_node(root->left,element);
        }
        else{

        }
    }
}
void create_binary_tree(int*arr,int i,int n,struct node*root)
{
    if(i<n){
        if(i==0){
            root=new node(arr[i]);
            i++;
            rootx=root;
            create_binary_tree(arr,i,n,rootx);
        }
        else{
            if(root->data>arr[i]){
                if(root->left!=NULL){
                    create_binary_tree(arr,i,n,root->left);
                }
                else{
                    root->left=new node(arr[i]);
                    i++;
                    create_binary_tree(arr,i,n,rootx);
                }
            }
            else{
                if(root->right!=NULL){
                    create_binary_tree(arr,i,n,root->right);
                }
                else{
                    root->right=new node(arr[i]);
                    i++;
                    create_binary_tree(arr,i,n,rootx);
                }
            }
        }
    }
}
void level_order(struct node*root)
{
    queue<node*>x;
    x.push(root);
    while(!x.empty()){
        cout<<x.front()->data<<" ";
        node*temp=x.front();
        x.pop();
        if(temp->left!=NULL){
            x.push(temp->left);
        }
        if(temp->right!=NULL){
            x.push(temp->right);
        }
    }
}
int main()
{
    int n;
    cout<<"Enter the size of the array:"<<endl;
    cin>>n;
    int*arr=new int[n];
    cout<<"Enter the number of elements to be inserted in the array:"<<endl;
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    struct node*root=NULL;
    create_binary_tree(arr,0,n,root);
    int element;
    cout<<"Enter the element that needs to be inserted:"<<endl;
    cin>>element;
    insert_node(rootx,element);
    level_order(rootx);
}