////// Graph coloring problem to find the chromatic number of a graph.
#include<bits/stdc++.h>
#include<cstdlib>
#include<fstream>
using namespace std;

struct Edge{
    map<int,vector<int> > adj;
    char color_used='\0';
}vertex[4];

class Graph{
public:

    int number_edges=0;
    int chromatic_number=0;

    char color[3]={'G','R','B'};
    
    Graph(int n)
    {
        number_edges=n;
    }

    bool add_edge(int source,int destination)
    {
        /* From source to destination we need to check if source and destination has different colors. Here we need to
            check if color of source and destination are different.
         */ 
        bool factor=false;
        if(vertex[source].color_used=='\0'){
            for(int i=0;i<3;i++){
                if(vertex[destination].color_used!=color[i]){
                    vertex[source].color_used=color[i];
                    factor=true;
                    ((vertex[source]).adj[source]).push_back(destination);
                    break;
                }
            }
            if(factor==false){
                return(factor);
            }
        }

        if(vertex[source].color_used!='\0'){
            if(vertex[source].color_used==vertex[destination].color_used){
                bool factor=false;
                for(int i=0;i<3;i++){
                    if(color[i]!=vertex[source].color_used){
                        vector<int> temp=((vertex[source]).adj[source]);
                        for(vector<int>::iterator itr=temp.begin();itr!=temp.end();itr++){
                            if(vertex[*itr].color_used!=color[i]){
                                vertex[source].color_used=color[i];
                                ((vertex[source]).adj[source]).push_back(destination);
                                factor=true;
                                break;
                            }
                        }
                    }
                    if(factor==true){
                        break;
                    }
                }
                if(factor==false){
                    return(factor);
                }
            }
            else{
                ((vertex[source]).adj[source]).push_back(destination);
            }
        }

        /* From destination to source we need to check if destination and source has different colors. Here we need to
            check if color of destination and source are different.
         */

        factor=false;
        
        if(vertex[destination].color_used=='\0'){
            for(int i=0;i<3;i++){
                if(vertex[source].color_used!=color[i]){
                    vertex[destination].color_used=color[i];
                    factor=true;
                    ((vertex[destination]).adj[destination]).push_back(source);
                    break;
                }
            }
            if(factor==false){
                return(factor);
            }
        }

        if(vertex[destination].color_used!='\0'){
            ((vertex[destination]).adj[destination]).push_back(source);
        }

        return(true);
    }

    int find_chromatic_number(void)
    {
        /// 'G' 'R' and 'B'.
        vector<char>input;

        for(int i=0;i<number_edges;i++){
            bool factor=false;
            for(int j=0;j<input.size();j++){
                if(input[j]==vertex[i].color_used){
                    factor=true;
                    break;
                }
            }
            if(factor==false){
                input.push_back(vertex[i].color_used);
            }
        }

        chromatic_number=input.size();

        return(chromatic_number);
    }
};

int main()
{
    Graph*g=new Graph(4);
    /*
    if(g->add_edge(0,1)==false){
        cout<<"Not possible to make graph"<<endl;
        cout<<"1"<<endl;
        exit(0);
    }
    if(g->add_edge(0,2)==false){
        cout<<"Not possible to make graph"<<endl;
        cout<<"2"<<endl;
        exit(0);
    }
    if(g->add_edge(1,2)==false){
        cout<<"Not possible to make graph"<<endl;
        cout<<"3"<<endl;
        exit(0);
    }
    if(g->add_edge(1,3)==false){
        cout<<"Not possible to make graph"<<endl;
        cout<<"4"<<endl;
        exit(0);
    }
    if(g->add_edge(1,4)==false){
        cout<<"Not possible to make graph"<<endl;
        cout<<"5"<<endl;
        exit(0);
    }
    if(g->add_edge(2,3)==false){
        cout<<"Not possible to make graph"<<endl;
        cout<<"6"<<endl;
        exit(0);
    }
    if(g->add_edge(3,4)==false){
        cout<<"Not possible to make graph"<<endl;
        cout<<"7"<<endl;
        exit(0);
    }
    */

   if(g->add_edge(0,1)==false){
       cout<<"Not possible to make graph"<<endl;
       cout<<"1"<<endl;
       exit(0);
   }
   if(g->add_edge(0,3)==false){
       cout<<"Not possible to make graph"<<endl;
       cout<<"2"<<endl;
       exit(0);
   }
   if(g->add_edge(1,2)==false){
       cout<<"Not possible to make graph"<<endl;
       cout<<"3"<<endl;
       exit(0);
   }
   if(g->add_edge(2,3)==false){
       cout<<"Not possible to make graph"<<endl;
       cout<<"4"<<endl;
       exit(0);
   }

    cout<<"Graph has been constructed"<<endl;

    cout<<"The chromatic number of the graph is:"<<g->find_chromatic_number()<<endl;

}


