/// Printing all paths in Hamiltonian cycle using adjacency matrix.
#include<bits/stdc++.h>
#include<cstdlib>
#include<fstream>
using namespace std;

vector<vector<int> >paths;

void create_path(int**graph,vector<bool>&visited,vector<int>&path,int vertex,int n)
{
    if(path.size()==n){
        paths.push_back(path);
        return;
    }

    for(int i=0;i<n;i++){
        if(graph[vertex][i]==1){
            if(visited[i]==false){
                visited[i]=true;
                path.push_back(i);
                create_path(graph,visited,path,i,n);
                ///Backtrack.
                visited[i]=false;
                path.pop_back();
            }
        }
    }
}

void hamiltonian_cycle(int**graph,int n)
{
    for(int i=0;i<n;i++){
        vector<bool> visited(n,false);
        vector<int> path;
        visited[i]=true;
        path.push_back(i);
        create_path(graph,visited,path,i,n);
    }
}

void add_edge(int src,int dest,int**graph)
{
    /// From source to destination.
    graph[src][dest]=1;
    /// From destination to source.
    graph[dest][src]=1;
}

int main()
{
    int V,edges;
    
    cout<<"Enter the number of vertices in the graph:"<<endl;
    
    cin>>V;

    int**graph=new int*[V];

    for(int i=0;i<V;i++){
        graph[i]=new int[V];
    }

    for(int i=0;i<V;i++){
        for(int j=0;j<V;j++){
            graph[i][j]=0;
        }
    }

    cout<<"Total number of edges in the graph:"<<endl;
    cin>>edges;

    for(int i=0;i<edges;i++){
        int src,dest;
        cin>>src>>dest;
        add_edge(src,dest,graph);
    }

    hamiltonian_cycle(graph,V);

    for(int i=0;i<paths.size();i++){
        vector<int> path=paths[i];

        for(int j=0;j<path.size();j++){
            cout<<path[j]<<" ";
        }
        cout<<endl;
    }
}




