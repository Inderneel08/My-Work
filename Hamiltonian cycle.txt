#include<bits/stdc++.h>
#include<cstdlib>
#include<fstream>
using namespace std;
void print_solution(int*path,int n)
{
    for(int i=0;i<n;i++){
        cout<<path[i]<<" ";
    }
    cout<<path[0]<<" ";
}
bool is_safe(int**graph,int*path,int v,int position,int n)
{
    /// Check whether the element entered in the last position-1 is adjacent to vertex v.
    if(graph[path[position-1]][v]==0){
        return(false);
    }
    /// What if the vertex has already been included or not.
    for(int i=0;i<position;i++){
        if(path[i]==v){
            return(false);
        }
    }
    return(true);
}
bool hamiltonian_cycle(int**graph,int*path,int n,int position)
{
    if(position==n){
        /* If position is equal to n check whether the last element entered in the path array
        is equal to the first element in the path array
        */
        if(graph[path[position-1]][path[0]]){
            return(true);
        }
        else{
            return(false);
        }
    }
    for(int v=1;v<n;v++){
        if(is_safe(graph,path,v,position,n)){
            path[position]=v; ///Check if this vertex can be added to Hamilton cycle.
            if(hamiltonian_cycle(graph,path,n,position+1)){
                return(true);
            }
            path[position]=-1; /// If they can't be added to Hamilton cycle.
        }
    }
    return(false);
}
void hamilton(int**graph,int*path,int n)
{
    path[0]=0;/// First element in the path array is 0.
    if(hamiltonian_cycle(graph,path,n,1)){
        print_solution(path,n);
    }
    else{
        cout<<"Solution does not exists:"<<endl;
    }
}
int main()
{
    int n=5;
    int**graph=new int*[n];/// For storing graph.
    int*path=new int[n];/// This array is made to store the path that will be followed or printed.
    for(int i=0;i<n;i++){
        path[i]=-1;
    }
    for(int i=0;i<n;i++){
        graph[i]=new int[n];
    }
    graph[0][0]=0;
    graph[0][1]=1;
    graph[0][2]=0;
    graph[0][3]=1;
    graph[0][4]=0;
    graph[1][0]=1;
    graph[1][1]=0;
    graph[1][2]=1;
    graph[1][3]=1;
    graph[1][4]=1;
    graph[2][0]=0;
    graph[2][1]=1;
    graph[2][2]=0;
    graph[2][3]=0;
    graph[2][4]=1;
    graph[3][0]=1;
    graph[3][1]=1;
    graph[3][2]=0;
    graph[3][3]=0;
    graph[3][4]=1;
    graph[4][0]=0;
    graph[4][1]=1;
    graph[4][2]=1;
    graph[4][3]=1;
    graph[4][4]=0;
    hamilton(graph,path,n);
}
