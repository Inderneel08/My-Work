#include<iostream>
#include<cstdlib>
#include<fstream>
#include<string>
using namespace std;
string input;
string output;
struct node{
    char data;
    struct node*next;
}*s,*top;
void push_string(char ch);
void push_stack(char ch);
void pop_stack(void);
int precedence(char ch);
int main()
{
    int i;
    char ch;
    cout<<"Enter the string to be entered: "<<endl;
    cin>>input;
    for(i=0;i<input.size();i++){
        ch=input[i];
        if((ch>='A')&&(ch<='Z')){
            push_string(ch);
        }
        else if(ch==')'){
            push_stack(ch);
            pop_stack();
        }
        else if(ch=='+'||ch=='-'||ch=='*'||ch=='/'||ch=='('||ch=='^'){
            push_stack(ch);
        }
    }
    if(top==NULL){
        cout<<output;
    }
    else{
        pop_stack();
        cout<<output;
    }
}
void push_string(char ch)
{
    output.push_back(ch);
}
void push_stack(char ch)
{
    s=(struct node*)malloc(sizeof(struct node));
    int symbol1,symbol2;
    if(top==NULL){
        s->data=ch;
        s->next=NULL;
        top=s;
    }
    else{
        if(top->data=='('||top->data==')'){
            s->data=ch;
            s->next=top;
            top=s;
        }
        else{
            symbol1=precedence(top->data);
            symbol2=precedence(ch);
            if(symbol2>symbol1){
                s->data=ch;
                s->next=top;
                top=s;
            }
            else{
                pop_stack();
                push_stack(ch);
            }
        }
    }
}
void pop_stack(void)
{
    struct node*temp;
    if(top->data==')'){
        temp=top;
        free(temp);
        top=top->next;
        while(top->data!='('){
            temp=top;
            output.push_back(temp->data);
            free(temp);
            top=top->next;
        }
        temp=top;
        top=top->next;
        free(temp);
    }
    else{
        while(top!=NULL){
            temp=top;
            output.push_back(temp->data);
            free(temp);
            top=top->next;
        }
    }
}
int precedence(char ch)
{
    if(ch=='+'||ch=='-'){
        return(1);
    }
    else if(ch=='*'){
        return(2);
    }
    else if(ch=='/'){
        return(3);
    }
    else if(ch=='^'){
        return(4);
    }
}
