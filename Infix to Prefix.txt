#include<iostream>
#include<cstdlib>
#include<fstream>
#include<string>
#include<algorithm>
using namespace std;
string input;
string output;
struct node{
    char data;
    struct node*next;
}*top,*s;
void push_string(char ch);
void push_stack(char ch);
void pop_stack(void);
int precedence(char ch);
int main()
{
    int i;
    char c;
    cout<<"Enter the input string: "<<endl;
    cin>>input;
    reverse(input.begin(),input.end());
    for(i=0;i<input.size();i++){
        c=input[i];
        if(c>='A'&&c<='Z'){
            push_string(c);
        }
        else if(c=='+'||c=='-'||c=='*'||c=='/'||c==')'){
            push_stack(c);
        }
        else if(c=='('){
            pop_stack();
        }
    }
    if(top==NULL){
        reverse(output.begin(),output.end());
        cout<<endl;
        cout<<output;
    }
    else{
        pop_stack();
        reverse(output.begin(),output.end());
        cout<<endl;
        cout<<output;
    }
}
void push_string(char ch)
{
    output.push_back(ch);
}
void push_stack(char ch)
{
    int symbol1,symbol2;
    s=(struct node*)malloc(sizeof(struct node));
    if(top==NULL){
        s->data=ch;
        s->next=NULL;
        top=s;
    }
    else{
        symbol1=precedence(top->data);
        symbol2=precedence(ch);
        if(symbol2>symbol1){
            s->data=ch;
            s->next=top;
            top=s;
        }
        else{
            pop_stack();
            push_stack(ch);
        }
    }
}
void pop_stack(void)
{
    struct node*temp;
    if(top->data=='('){
        temp=top;
        top=top->next;
        free(temp);
        while(top->data!=')'){
            temp=top;
            output.push_back(temp->data);
            top=top->next;
            free(temp);
        }
    }
    else if(top->data=='('){
        temp=top;
        top=top->next;
        free(temp);
        while(top!=NULL){
            temp=top;
            output.push_back(temp->data);
            top=top->next;
            free(temp);
        }
    }
    else{
        while(top!=NULL){
            temp=top;
            output.push_back(temp->data);
            top=top->next;
            free(temp);
        }
    }
}
int precedence(char ch)
{
    if(ch=='+'||ch=='-'){
        return(1);
    }
    else if(ch=='*'){
        return(2);
    }
    else if(ch=='/'){
        return(3);
    }
}
