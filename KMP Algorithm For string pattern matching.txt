/// KMP algorithm for string matching.
#include<bits/stdc++.h>
#include<cstdlib>
#include<fstream>
using namespace std;
void construct_lps_array(int*lps,int n,char*pat)
{
    lps[0]=0;
    int i=1;
    int j=0;

    while(i<n){
        if(pat[j]==pat[i]){
            lps[i]=j+1;
            j++;
            i++;
        }
        else{
            if(j==0){
                lps[i]=0;
                i++;
            }
            else{
                j=lps[j-1];
            }
        }
    }

}

void search_pattern_index(char*txt,char*pat,int*lps)
{

    int j=0;
    int i=0;

    while(i<strlen(txt)){
        if(txt[i]==pat[j]){
            i++;
            j++;
        }

        if(j==strlen(pat)){
            cout<<"Pattern found at index:"<<i-j<<endl;
            j=lps[j-1];
        }

        else if(i<strlen(txt)&&txt[i]!=pat[j]){
            if(j!=0){
                j=lps[j-1];
            }
            else{
                i++;
            }
        }
    }

}

int main()
{
    char txt[]="ABABDABACDABABCABAB";
    char pat[]="ABAB";
    int lps[strlen(pat)];
    construct_lps_array(lps,strlen(pat),pat);

    search_pattern_index(txt,pat,lps);
}
