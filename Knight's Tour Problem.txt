/// /// Knight's Tour Problem.
#include<bits/stdc++.h>
#include<cstdlib>
#include<fstream>
using namespace std;

class Knight_Tour{
public:
    
    int row1[8]={2,1,-1,-2,-2,-1,1,2};
    int col1[8]={1,2,2,1,-1,-2,-2,-1};
    int cnt=0;

    void print_solution(int**board,int n)
    {
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                cout<<board[i][j]<<" ";
            }
            cout<<endl;
        }
    }

    void initialize_board(int n,int**board)
    {
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                board[i][j]=0;
            }
        }
    }

    bool check_condition(int row,int col,int n,int**board)
    {
        if(row<0||row>=n||board[row][col]!=0){
            return(false);
        }
        if(col<0||col>=n||board[row][col]!=0){
            return(false);
        }
        if(row==0&&col==0&&cnt>0){
            return(false);
        }
        return(true);
    }

    bool istracking(int**board,int row,int col,int n)
    {
        /* Base condition */

        if(cnt==64){
            print_solution(board,n);
            return(true);
        }

        /* Not a base condition. */
        
        else{
            if(check_condition(row,col,n,board)){
                board[row][col]=cnt;
                cnt++;
                int i=0;
                while(i<8){
                    if(istracking(board,row+row1[i],col+col1[i],n)){
                        return(true);
                    }
                    i++;
                }
                board[row][col]=0;
                cnt--;
            }
        }

        return(false);
    }
};

int main()
{
    int n=8; //// size of the board.

    int**board=new int*[n];  //// Constructing a board.

    for(int i=0;i<n;i++){        
        board[i]=new int[n];
    }

    Knight_Tour t;

    t.initialize_board(n,board);

    if(t.istracking(board,0,0,n)==false){
      cout<<"Solution does not exists:"<<endl;
    }

}

