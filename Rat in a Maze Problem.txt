/// Rat in a maze problem.

/*
Rat begins to start it's motion from the source that is (0,0) and goes to the destination that is (N-1,N-1). 
The rat moves in two directions forward and down. That means no diagnal movement by the rat. Only ((i+1),j) and
(i,(j+1)).
*/

#include<bits/stdc++.h>
#include<cstdlib>
#include<fstream>
using namespace std;

void print_solution(int**arr,bool**visited,int n)
{
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            arr[i][j]=0;
            if(visited[i][j]==true){
                arr[i][j]=1;
            }
        }
    }

    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            cout<<arr[i][j]<<" ";
        }
        cout<<endl;
    }
}

bool check_positions(int n,int source_x,int source_y,int**arr,bool**visited)
{
    if(source_x>=n||source_y>=n||arr[source_x][source_y]==0){
        return(false);
    }

    return(true);
}

bool find_pattern(int**arr,bool**visited,int n,int source_x,int source_y)
{
    /// Source x, Source y =>(0,0).
    if((source_x==n-1)&&(source_y==n-1)){
        visited[source_x][source_y]=true;
        print_solution(arr,visited,n);
        return(true);
    }
    else{
        if(check_positions(n,source_x,source_y,arr,visited)){
            visited[source_x][source_y]=true;
            if(find_pattern(arr,visited,n,source_x+1,source_y)){
                return(true);
            }
            if(find_pattern(arr,visited,n,source_x,source_y+1)){
                return(true);
            }
            visited[source_x][source_y]=false;
            return(false);
        }
    }
    return(false);
}

int main()
{
    int n=4;
    int**arr=new int*[n];
    bool**visited=new bool*[n];
    
    for(int i=0;i<n;i++){
        arr[i]=new int[n];
        visited[i]=new bool[n];
    }
    
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            arr[i][j]=0;
            visited[i][j]=false;
        }
    }

    arr[0][0]=1;
    arr[0][1]=1;
    arr[0][2]=1;
    arr[0][3]=1;
    arr[1][0]=0;
    arr[1][1]=0;
    arr[1][2]=1;
    arr[1][3]=1;
    arr[2][0]=1;
    arr[2][1]=1;
    arr[2][2]=0;
    arr[2][3]=1;
    arr[3][0]=0;
    arr[3][1]=0;
    arr[3][2]=0;
    arr[3][3]=1;

    if(find_pattern(arr,visited,n,0,0)){
        cout<<"The above matrix represents the solution:"<<endl;
    }
    else{
        cout<<"The solution does not exists:"<<endl;
    }

}