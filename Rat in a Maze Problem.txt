#include<bits/stdc++.h>
#include<cstdlib>
#include<fstream>
using namespace std;
int n=4;
pair<int,int> source={0,0};
pair<int,int> destination={n-1,n-1};
bool check_position(int maze_matrix[][4],int row,int col)
{
    if(maze_matrix[row][col]==0){
        return(false);
    }
    else{
        return(true);
    }
}
bool solution_solve(int maze_matrix[][4])
{
    static pair<int,int> position=source;
    if(position==destination){
        return(true);
    }
    else{
        if(check_position(maze_matrix,position.first,position.second)){
            if(check_position(maze_matrix,position.first+1,position.second)){
                position.first+=1;
                position.second=position.second;
                return(true);
            }
            if(check_position(maze_matrix,position.first,position.second+1)){
                position.second+=1;
                position.first=position.first;
                return(true);
            }
            if(check_position(maze_matrix,position.first+1,position.second)==false){
                position.first=position.first-1;
                return(false);
            }
            if(check_position(maze_matrix,position.first,position.second+1==false)){
                position.second=position.second-1;
                return(false);
            }
        }
    }
}
int main()
{
    int maze_matrix[4][4]={{1,0,0,0},{1,1,0,1},{0,1,0,0},{1,1,1,1}};
    if(solution_solve(maze_matrix)){
        cout<<"Pattern found"<<endl;
    }
    else{
        cout<<"Pattern not found"<<endl;
    }
}

//// Count number of paths.


#include<bits/stdc++.h>
#include<cstdlib>
#include<fstream>
#define R 4
#define C 4
using namespace std;
pair<int,int> source={0,0};
pair<int,int> destination={R-1,C-1};
int count_paths(int matrix[][C])
{
    if(matrix[0][0]==-1){
        return(0);
    }
    for(int i=0;i<R;i++){
        if(matrix[0][i]==0){
            matrix[0][i]=1;
        }
        else{
            break;
        }
    }
    for(int i=1;i<C;i++){
        if(matrix[i][0]==0){
            matrix[i][0]=1;
        }
        else{
            break;
        }
    }
    for(int i=1;i<R;i++){
        for(int j=1;j<C;j++){
            if(matrix[i][j]==-1){
                continue;
            }
            if(matrix[i-1][j]>0){
                matrix[i][j]+=matrix[i-1][j];
            }
            if(matrix[i][j-1]>0){
                matrix[i][j]+=matrix[i][j-1];
            }
        }
    }
    return((matrix[R-1][C-1]>0)?matrix[R-1][C-1]:0);
}
int main()
{
    int maze[R][C]={{0,0,0,0},{0,-1,0,0},{-1,0,0,0},{0,0,0,0}};
    cout<<count_paths(maze)<<endl;
}
