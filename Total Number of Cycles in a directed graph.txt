#include<bits/stdc++.h>
#include<cstdlib>
#include<fstream>
int count_t=0;
using namespace std;
class Graph{
public:
    map<int,bool> visited;
    map<int,list<int> >adj;
    void create_edge(int source,int destination)
    {
        adj[source].push_back(destination);
    }
    void depth_first_search(int vertex)
    {
        visited[vertex]=true;
        list<int>::iterator i;
        for(i=adj[vertex].begin();i!=adj[vertex].end();i++){
            if(visited[*i]==true){
                count_t++;
            }
            else{
                visited[*i]=true;
                depth_first_search(*i);
            }
        }
    }
};
int main()
{
    Graph*g=new Graph;
    g->create_edge(0,1);
    g->create_edge(1,2);
    g->create_edge(1,3);
    g->create_edge(2,4);
    g->create_edge(4,1);
    g->create_edge(4,3);
    g->create_edge(3,0);
    g->depth_first_search(0);
    cout<<"Total number of cycles in a graph are: "<<count_t;
}
